"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toHaveValue = toHaveValue;

var _jestMatcherUtils = require("jest-matcher-utils");

var _isEqualWith = _interopRequireDefault(require("lodash/isEqualWith"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function toHaveValue(htmlElement, expectedValue) {
  var _this = this;

  (0, _utils.checkHtmlElement)(htmlElement, toHaveValue, this);

  if (htmlElement.tagName.toLowerCase() === 'input' && ['checkbox', 'radio'].includes(htmlElement.type)) {
    throw new Error('input with type=checkbox or type=radio cannot be used with .toHaveValue(). Use .toHaveFormValues() instead');
  }

  var receivedValue = (0, _utils.getSingleElementValue)(htmlElement);
  var expectsValue = expectedValue !== undefined;
  return {
    pass: expectsValue ? (0, _isEqualWith.default)(receivedValue, expectedValue, _utils.compareArraysAsSet) : Boolean(receivedValue),
    message: function message() {
      var to = _this.isNot ? 'not to' : 'to';
      var matcher = (0, _jestMatcherUtils.matcherHint)(`${_this.isNot ? '.not' : ''}.toHaveValue`, 'element', expectedValue);
      return (0, _utils.getMessage)(matcher, `Expected the element ${to} have value`, expectsValue ? expectedValue : '(any)', 'Received', receivedValue);
    }
  };
}